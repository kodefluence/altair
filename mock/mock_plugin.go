// Code generated by MockGen. DO NOT EDIT.
// Source: core/plugin.go

// Package mock is a generated GoMock package.
package mock

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockDownStreamPlugin is a mock of DownStreamPlugin interface
type MockDownStreamPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockDownStreamPluginMockRecorder
}

// MockDownStreamPluginMockRecorder is the mock recorder for MockDownStreamPlugin
type MockDownStreamPluginMockRecorder struct {
	mock *MockDownStreamPlugin
}

// NewMockDownStreamPlugin creates a new mock instance
func NewMockDownStreamPlugin(ctrl *gomock.Controller) *MockDownStreamPlugin {
	mock := &MockDownStreamPlugin{ctrl: ctrl}
	mock.recorder = &MockDownStreamPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownStreamPlugin) EXPECT() *MockDownStreamPluginMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockDownStreamPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDownStreamPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDownStreamPlugin)(nil).Name))
}

// Intervene mocks base method
func (m *MockDownStreamPlugin) Intervene(c *gin.Context, proxyReq *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intervene", c, proxyReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Intervene indicates an expected call of Intervene
func (mr *MockDownStreamPluginMockRecorder) Intervene(c, proxyReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intervene", reflect.TypeOf((*MockDownStreamPlugin)(nil).Intervene), c, proxyReq)
}
