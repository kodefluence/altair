// Code generated by MockGen. DO NOT EDIT.
// Source: core/routing.go

// Package mock is a generated GoMock package.
package mock

import (
	core "github.com/codefluence-x/altair/core"
	entity "github.com/codefluence-x/altair/entity"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRouteCompiler is a mock of RouteCompiler interface
type MockRouteCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteCompilerMockRecorder
}

// MockRouteCompilerMockRecorder is the mock recorder for MockRouteCompiler
type MockRouteCompilerMockRecorder struct {
	mock *MockRouteCompiler
}

// NewMockRouteCompiler creates a new mock instance
func NewMockRouteCompiler(ctrl *gomock.Controller) *MockRouteCompiler {
	mock := &MockRouteCompiler{ctrl: ctrl}
	mock.recorder = &MockRouteCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteCompiler) EXPECT() *MockRouteCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method
func (m *MockRouteCompiler) Compile(routesPath string) ([]entity.RouteObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", routesPath)
	ret0, _ := ret[0].([]entity.RouteObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile
func (mr *MockRouteCompilerMockRecorder) Compile(routesPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockRouteCompiler)(nil).Compile), routesPath)
}

// MockRouteGenerator is a mock of RouteGenerator interface
type MockRouteGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGeneratorMockRecorder
}

// MockRouteGeneratorMockRecorder is the mock recorder for MockRouteGenerator
type MockRouteGeneratorMockRecorder struct {
	mock *MockRouteGenerator
}

// NewMockRouteGenerator creates a new mock instance
func NewMockRouteGenerator(ctrl *gomock.Controller) *MockRouteGenerator {
	mock := &MockRouteGenerator{ctrl: ctrl}
	mock.recorder = &MockRouteGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGenerator) EXPECT() *MockRouteGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockRouteGenerator) Generate(engine *gin.Engine, routeObjects []entity.RouteObject, downStreamPlugin []core.DownStreamPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", engine, routeObjects, downStreamPlugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockRouteGeneratorMockRecorder) Generate(engine, routeObjects, downStreamPlugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockRouteGenerator)(nil).Generate), engine, routeObjects, downStreamPlugin)
}
